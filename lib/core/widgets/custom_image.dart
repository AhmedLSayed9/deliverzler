import 'package:deliverzler/core/routing/navigation_service.dart';
import 'package:deliverzler/core/widgets/custom_text.dart';
import 'package:flutter/material.dart';
import 'package:deliverzler/core/styles/sizes.dart';

class CustomImage extends Container {
  CustomImage(
    BuildContext context,
    String path, {
    Key? key,
    text,
    bundle,
    frameBuilder,
    errorBuilder,
    semanticLabel,
    excludeFromSemantics = false,
    scale,
    width,
    height,
    color,
    colorBlendMode,
    fit,
    alignment = Alignment.center,
    repeat = ImageRepeat.noRepeat,
    centerSlice,
    matchTextDirection = false,
    gaplessPlayback = false,
    isAntiAlias = false,
    package,
    filterQuality = FilterQuality.low,
    cacheWidth,
    cacheHeight,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
  }) : super(
          key: key,
          margin: margin,
          padding: padding,
          child: Column(
            mainAxisAlignment:
                imageAndTitleAlignment ?? MainAxisAlignment.center,
            children: [
              Image.asset(
                path,
                bundle: bundle,
                cacheHeight: cacheHeight,
                cacheWidth: cacheWidth,
                package: package,
                scale: scale,
                frameBuilder: frameBuilder,
                errorBuilder: errorBuilder,
                semanticLabel: semanticLabel,
                excludeFromSemantics: excludeFromSemantics,
                width: width,
                height: height,
                color: color,
                colorBlendMode: colorBlendMode,
                fit: fit,
                alignment: alignment,
                repeat: repeat,
                centerSlice: centerSlice,
                matchTextDirection: matchTextDirection,
                gaplessPlayback: gaplessPlayback,
                isAntiAlias: isAntiAlias,
                filterQuality: filterQuality,
              ),
              if (title != null)
                SizedBox(height: verticalGap ?? Sizes.vMarginComment(context)),
              if (title != null)
                CustomText(
                  NavigationService.context,
                  title,
                  size: fontSize ?? Sizes.fontSizes(context)['h5'],
                  color: titleColor ?? const Color(0xff666666),
                )
            ],
          ),
        );

  CustomImage.s1(
    BuildContext context,
    String path, {
    Key? key,
    Color? color,
    BoxFit? fit,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
  }) : this(
          context,
          path,
          key: key,
          imageAndTitleAlignment: imageAndTitleAlignment,
          height: Sizes.iconsSizes(context)['s1'],
          width: Sizes.iconsSizes(context)['s1'],
          color: color,
          upperShadow: upperShadow,
          padding: padding,
          margin: margin,
          title: title,
          verticalGap: verticalGap,
          fontSize: fontSize,
          titleColor: titleColor,
        );

  CustomImage.s2(
    BuildContext context,
    String path, {
    Key? key,
    Color? color,
    BoxFit? fit,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
  }) : this(
          context,
          path,
          key: key,
          imageAndTitleAlignment: imageAndTitleAlignment,
          height: Sizes.iconsSizes(context)['s2'],
          width: Sizes.iconsSizes(context)['s2'],
          color: color,
          upperShadow: upperShadow,
          padding: padding,
          margin: margin,
          title: title,
          verticalGap: verticalGap,
          fontSize: fontSize,
          titleColor: titleColor,
        );

  CustomImage.s3(
    BuildContext context,
    String path, {
    Key? key,
    Color? color,
    BoxFit? fit,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
  }) : this(
          context,
          path,
          key: key,
          imageAndTitleAlignment: imageAndTitleAlignment,
          height: Sizes.iconsSizes(context)['s3'],
          width: Sizes.iconsSizes(context)['s3'],
          color: color,
          upperShadow: upperShadow,
          padding: padding,
          margin: margin,
          title: title,
          verticalGap: verticalGap,
          fontSize: fontSize,
          titleColor: titleColor,
        );

  CustomImage.s4(
    BuildContext context,
    String path, {
    Key? key,
    Color? color,
    BoxFit? fit,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
  }) : this(
          context,
          path,
          key: key,
          imageAndTitleAlignment: imageAndTitleAlignment,
          height: Sizes.iconsSizes(context)['s4'],
          width: Sizes.iconsSizes(context)['s4'],
          color: color,
          upperShadow: upperShadow,
          padding: padding,
          margin: margin,
          title: title,
          verticalGap: verticalGap,
          fontSize: fontSize,
          titleColor: titleColor,
        );

  CustomImage.s5(
    BuildContext context,
    String path, {
    Key? key,
    Color? color,
    BoxFit? fit,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
  }) : this(
          context,
          path,
          key: key,
          imageAndTitleAlignment: imageAndTitleAlignment,
          height: Sizes.iconsSizes(context)['s5'],
          width: Sizes.iconsSizes(context)['s5'],
          color: color,
          upperShadow: upperShadow,
          padding: padding,
          margin: margin,
          title: title,
          verticalGap: verticalGap,
          fontSize: fontSize,
          titleColor: titleColor,
        );

  CustomImage.s6(
    BuildContext context,
    String path, {
    Key? key,
    Color? color,
    BoxFit? fit,
    MainAxisAlignment? imageAndTitleAlignment,
    bool upperShadow = false,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    String? title,
    double? verticalGap,
    double? fontSize,
    Color? titleColor,
  }) : this(
          context,
          path,
          key: key,
          imageAndTitleAlignment: imageAndTitleAlignment,
          height: Sizes.iconsSizes(context)['s6'],
          width: Sizes.iconsSizes(context)['s6'],
          color: color,
          upperShadow: upperShadow,
          padding: padding,
          margin: margin,
          title: title,
          verticalGap: verticalGap,
          fontSize: fontSize,
          titleColor: titleColor,
        );
}
